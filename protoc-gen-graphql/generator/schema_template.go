package generator

var schemaTemplate = `# Schema generated by protoc-gen-graphql, DO NOT EDIT.

type Query {
{{- range .Queries }}
  {{- if .Comment }}
  """ {{ .Comment }} """
  {{- end }}
  {{ .QueryName }}({{ .SchemaArgs }}): {{ .OutputName }}
{{- end }}
}

type Mutation {
{{- range .Mutations }}
  {{- if .Comment }}
  """ {{ .Comment }} """
  {{- end }}
  {{ .MutationName }}({{ .InputName }}: {{ .Input.Name }}): {{ .OutputName }}
{{- end }}
}
{{ range .Types -}}
{{- if .Comment }}
# {{ .Comment }}
{{- end }}
type {{ .Name }} {
{{- range .Fields }}
  {{- if .Comment }}
  """ {{ .Comment }} """
  {{- end }}
  {{ .Name }}: {{ .SchemaType }}
{{- end }}
} # message {{ .Name }} in {{ .Filename }}
{{ end }}

{{- range .Enums -}}
{{- if .Comment }}
# {{ .Comment }}
{{- end }}
enum {{ .Name }} {
{{- range .Values }}
  {{- if .Comment }}
  """ {{ .Comment }} """
  {{- end }}
  {{ .Name }}
{{- end }}
} # enum {{ .Name }} in {{ .Filename }}
{{ end }}

{{- range .Inputs -}}
{{- if .Comment }}
# {{ .Comment }}
{{- end }}
input {{ .Name }} {
{{- range .Fields }}
  {{- if .Comment }}
  """ {{ .Comment }} """
  {{- end }}
  {{ .Name }}: {{ .SchemaType }}
{{- end }}
} # message {{ .Name }} in {{ .Filename }}
{{ end }}`
