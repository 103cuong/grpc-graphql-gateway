// Code generated by protoc-gen-go. DO NOT EDIT.
// source: graphql.proto

package graphql

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// explicit schema declaration enum
type GraphqlType int32

const (
	// schema will generate as Query
	GraphqlType_QUERY GraphqlType = 0
	// schema will generate as Mutation
	GraphqlType_MUTATION GraphqlType = 1
)

var GraphqlType_name = map[int32]string{
	0: "QUERY",
	1: "MUTATION",
}

var GraphqlType_value = map[string]int32{
	"QUERY":    0,
	"MUTATION": 1,
}

func (x GraphqlType) String() string {
	return proto.EnumName(GraphqlType_name, int32(x))
}

func (GraphqlType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ce0fc368bdc1a51, []int{0}
}

// Extend ServiceOptions in order to define grpc connection setting.
// User can use this option as following:
//
// service Greeter {
//    option (graphql.service) = {
//      host: "localhost:50051" // define grpc connection host and port
//      insecure: true          // set true if connect to insecure grpc server
//    };
//
//    ... some rpc definitions
// }
type GraphqlService struct {
	// gRPC default connection host.
	// This value should include host and port, say localhost:50051.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// If true, automatic connection with insecure option.
	Insecure             bool     `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphqlService) Reset()         { *m = GraphqlService{} }
func (m *GraphqlService) String() string { return proto.CompactTextString(m) }
func (*GraphqlService) ProtoMessage()    {}
func (*GraphqlService) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0fc368bdc1a51, []int{0}
}

func (m *GraphqlService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphqlService.Unmarshal(m, b)
}
func (m *GraphqlService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphqlService.Marshal(b, m, deterministic)
}
func (m *GraphqlService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphqlService.Merge(m, src)
}
func (m *GraphqlService) XXX_Size() int {
	return xxx_messageInfo_GraphqlService.Size(m)
}
func (m *GraphqlService) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphqlService.DiscardUnknown(m)
}

var xxx_messageInfo_GraphqlService proto.InternalMessageInfo

func (m *GraphqlService) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GraphqlService) GetInsecure() bool {
	if m != nil {
		return m.Insecure
	}
	return false
}

// Extend MethodOptions in order to define GraphQL Query or Mutation.
// User can use this option as following:
//
// service Greeter {
//    rpc SayHello(HelloRequest) returns (HelloReply) {
//      option (graphql.schema) = {
//        type: QUERY    // declare as Query
//        name: "hello"  // query name
//      }
//    }
// }
//
// Since gRPC reason, it has limitation that the response could not be repeated.
// it's dificcurl to respond array response, so that we accept "response.pluck"
// in order to expose repeated fields in response message.
//
// For instance:
//
// message Member {
//   string name = 1;
// }
//
// message ListMembersResponse {
//   repeated Member members = 1; -- could be array response
// }
//
// message ListMembersRequest {
// }
//
// service MemberService {
//    rpc ListMembers(ListMembersRequest) returns (ListMembersResponse) {
//      option (graphql.schema) = {
//        type: QUERY
//        name: "members"
//        response {
//          repeated : true
//          pluck: "members" // Query will respond [Member] instead of ListMembersResponse
//        }
//      }
//    }
// }
//
// In mutation declaration:
//
// service MemberService {
//    rpc CreateMember(CreateMemberRequest) returns (Member) {
//      option (graphql.schema) = {
//        type: MUTATION        // declare as Mutation
//        name: "cretemember"   // mutation name
//      }
//    }
// }
//
// The Mutation's input always becomes an input object, so you need to declare argument name.
//
// message Member {
//   string name = 1;
// }
//
// message CreateMemberRequest {
//   string name = 1;
// }
//
// service MemberService {
//    rpc CreateMember(CreateMemberRequest) returns (Member) {
//      option (graphql.schema) = {
//        type: MUTATION
//        name: "createmember"
//        request {
//          name: "member" // this is equivalent to createbook(member: Member): Member in GraphQL
//        }
//      }
//    }
// }
//
// Finally, user can access this query via /graphql?query={members{name}}
type GraphqlSchema struct {
	// graphql type. Enum of QUERY or MUTATION is valid value
	Type GraphqlType `protobuf:"varint,1,opt,name=type,proto3,enum=graphql.GraphqlType" json:"type,omitempty"`
	// query name. this field is required
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Query request object configuration
	Request *GraphqlRequest `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	// Query response object configuration
	Response             *GraphqlResponse `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GraphqlSchema) Reset()         { *m = GraphqlSchema{} }
func (m *GraphqlSchema) String() string { return proto.CompactTextString(m) }
func (*GraphqlSchema) ProtoMessage()    {}
func (*GraphqlSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0fc368bdc1a51, []int{1}
}

func (m *GraphqlSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphqlSchema.Unmarshal(m, b)
}
func (m *GraphqlSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphqlSchema.Marshal(b, m, deterministic)
}
func (m *GraphqlSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphqlSchema.Merge(m, src)
}
func (m *GraphqlSchema) XXX_Size() int {
	return xxx_messageInfo_GraphqlSchema.Size(m)
}
func (m *GraphqlSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphqlSchema.DiscardUnknown(m)
}

var xxx_messageInfo_GraphqlSchema proto.InternalMessageInfo

func (m *GraphqlSchema) GetType() GraphqlType {
	if m != nil {
		return m.Type
	}
	return GraphqlType_QUERY
}

func (m *GraphqlSchema) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphqlSchema) GetRequest() *GraphqlRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *GraphqlSchema) GetResponse() *GraphqlResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

// configuration option for request
type GraphqlRequest struct {
	// Define input name.
	// This field enables only for mutation and note that if this field is specified,
	// the gRPC request message will be dealt with an input.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Define pluck message fields
	Plucks               []string `protobuf:"bytes,2,rep,name=plucks,proto3" json:"plucks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphqlRequest) Reset()         { *m = GraphqlRequest{} }
func (m *GraphqlRequest) String() string { return proto.CompactTextString(m) }
func (*GraphqlRequest) ProtoMessage()    {}
func (*GraphqlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0fc368bdc1a51, []int{2}
}

func (m *GraphqlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphqlRequest.Unmarshal(m, b)
}
func (m *GraphqlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphqlRequest.Marshal(b, m, deterministic)
}
func (m *GraphqlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphqlRequest.Merge(m, src)
}
func (m *GraphqlRequest) XXX_Size() int {
	return xxx_messageInfo_GraphqlRequest.Size(m)
}
func (m *GraphqlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphqlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GraphqlRequest proto.InternalMessageInfo

func (m *GraphqlRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphqlRequest) GetPlucks() []string {
	if m != nil {
		return m.Plucks
	}
	return nil
}

// configuration option for response
type GraphqlResponse struct {
	// If true, this response object is required
	// But when you declare "expose", we respect expose field definition.
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Define pluck message field.
	// Note that this field IS NOT repeated, just single string field.
	// It means the response could only be single.
	Pluck                string   `protobuf:"bytes,2,opt,name=pluck,proto3" json:"pluck,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphqlResponse) Reset()         { *m = GraphqlResponse{} }
func (m *GraphqlResponse) String() string { return proto.CompactTextString(m) }
func (*GraphqlResponse) ProtoMessage()    {}
func (*GraphqlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0fc368bdc1a51, []int{3}
}

func (m *GraphqlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphqlResponse.Unmarshal(m, b)
}
func (m *GraphqlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphqlResponse.Marshal(b, m, deterministic)
}
func (m *GraphqlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphqlResponse.Merge(m, src)
}
func (m *GraphqlResponse) XXX_Size() int {
	return xxx_messageInfo_GraphqlResponse.Size(m)
}
func (m *GraphqlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphqlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GraphqlResponse proto.InternalMessageInfo

func (m *GraphqlResponse) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *GraphqlResponse) GetPluck() string {
	if m != nil {
		return m.Pluck
	}
	return ""
}

// GraphqlField is FieldOptions in protobuf in order to define type field attribute.
// User can use this option as following:
//
// message Member {
//   string name = 1 [(graphql.field) = {required: true}]; // this field is required in GraphQL, it equivalent to String! on GraphQL
// }
//
// message CreateMemberRequest {
//   string name = 1; [(grahpql.field) = {default: "anonymous"}]; // use default value on input or query
// }
//
// Note that in protobuf, all fields are dealt with optional
// so the same as it, all GraphQL fields are optional as default.
// If you need to be required, use 'required: true' option
type GraphqlField struct {
	// If true, this field is required.
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Use as other field name (not recommend)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Define default value on input.
	Default              string   `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphqlField) Reset()         { *m = GraphqlField{} }
func (m *GraphqlField) String() string { return proto.CompactTextString(m) }
func (*GraphqlField) ProtoMessage()    {}
func (*GraphqlField) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce0fc368bdc1a51, []int{4}
}

func (m *GraphqlField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GraphqlField.Unmarshal(m, b)
}
func (m *GraphqlField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GraphqlField.Marshal(b, m, deterministic)
}
func (m *GraphqlField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphqlField.Merge(m, src)
}
func (m *GraphqlField) XXX_Size() int {
	return xxx_messageInfo_GraphqlField.Size(m)
}
func (m *GraphqlField) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphqlField.DiscardUnknown(m)
}

var xxx_messageInfo_GraphqlField proto.InternalMessageInfo

func (m *GraphqlField) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *GraphqlField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GraphqlField) GetDefault() string {
	if m != nil {
		return m.Default
	}
	return ""
}

var E_Service = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*GraphqlService)(nil),
	Field:         1079,
	Name:          "graphql.service",
	Tag:           "bytes,1079,opt,name=service",
	Filename:      "graphql.proto",
}

var E_Field = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*GraphqlField)(nil),
	Field:         1079,
	Name:          "graphql.field",
	Tag:           "bytes,1079,opt,name=field",
	Filename:      "graphql.proto",
}

var E_Schema = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*GraphqlSchema)(nil),
	Field:         1079,
	Name:          "graphql.schema",
	Tag:           "bytes,1079,opt,name=schema",
	Filename:      "graphql.proto",
}

func init() {
	proto.RegisterEnum("graphql.GraphqlType", GraphqlType_name, GraphqlType_value)
	proto.RegisterType((*GraphqlService)(nil), "graphql.GraphqlService")
	proto.RegisterType((*GraphqlSchema)(nil), "graphql.GraphqlSchema")
	proto.RegisterType((*GraphqlRequest)(nil), "graphql.GraphqlRequest")
	proto.RegisterType((*GraphqlResponse)(nil), "graphql.GraphqlResponse")
	proto.RegisterType((*GraphqlField)(nil), "graphql.GraphqlField")
	proto.RegisterExtension(E_Service)
	proto.RegisterExtension(E_Field)
	proto.RegisterExtension(E_Schema)
}

func init() { proto.RegisterFile("graphql.proto", fileDescriptor_3ce0fc368bdc1a51) }

var fileDescriptor_3ce0fc368bdc1a51 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xdb, 0x6b, 0xd4, 0x40,
	0x14, 0xc6, 0x4d, 0xbb, 0x97, 0xe4, 0xf4, 0x62, 0x19, 0x6a, 0x0d, 0x05, 0x35, 0xe4, 0x41, 0x82,
	0xd0, 0x84, 0xb6, 0x3e, 0x2d, 0x3e, 0x78, 0x41, 0x45, 0xa4, 0x2e, 0x4e, 0xb7, 0xa0, 0xbe, 0x65,
	0xb3, 0x67, 0x93, 0x60, 0x76, 0x67, 0x3a, 0x33, 0x51, 0xf6, 0x1f, 0xd3, 0x7f, 0x4f, 0x76, 0x66,
	0x12, 0x4a, 0x52, 0x7c, 0xcb, 0x97, 0xf9, 0xce, 0x6f, 0xbe, 0x73, 0xe6, 0xc0, 0x41, 0x2e, 0x52,
	0x5e, 0xdc, 0x56, 0x31, 0x17, 0x4c, 0x31, 0x32, 0xb6, 0xf2, 0x34, 0xc8, 0x19, 0xcb, 0x2b, 0x4c,
	0xf4, 0xef, 0x79, 0xbd, 0x4c, 0x16, 0x28, 0x33, 0x51, 0x72, 0xc5, 0x84, 0xb1, 0x86, 0xaf, 0xe1,
	0xf0, 0xa3, 0x31, 0x5f, 0xa3, 0xf8, 0x55, 0x66, 0x48, 0x08, 0x0c, 0x0a, 0x26, 0x95, 0xef, 0x04,
	0x4e, 0xe4, 0x51, 0xfd, 0x4d, 0x4e, 0xc1, 0x2d, 0xd7, 0x12, 0xb3, 0x5a, 0xa0, 0xbf, 0x13, 0x38,
	0x91, 0x4b, 0x5b, 0x1d, 0xfe, 0x71, 0xe0, 0xa0, 0x41, 0x64, 0x05, 0xae, 0x52, 0x12, 0xc1, 0x40,
	0x6d, 0x38, 0x6a, 0xc2, 0xe1, 0xc5, 0x71, 0xdc, 0x84, 0xb3, 0xae, 0xd9, 0x86, 0x23, 0xd5, 0x8e,
	0xed, 0x5d, 0xeb, 0x74, 0x65, 0x98, 0x1e, 0xd5, 0xdf, 0xe4, 0x1c, 0xc6, 0x02, 0x6f, 0x6b, 0x94,
	0xca, 0xdf, 0x0d, 0x9c, 0x68, 0xef, 0xe2, 0x71, 0x17, 0x40, 0xcd, 0x31, 0x6d, 0x7c, 0xe4, 0x25,
	0xb8, 0x02, 0x25, 0x67, 0x6b, 0x89, 0xfe, 0x40, 0xd7, 0xf8, 0xfd, 0x1a, 0x73, 0x4e, 0x5b, 0x67,
	0xf8, 0xaa, 0x6d, 0xdd, 0x02, 0xdb, 0x38, 0xce, 0x9d, 0x38, 0x27, 0x30, 0xe2, 0x55, 0x9d, 0xfd,
	0x94, 0xfe, 0x4e, 0xb0, 0x1b, 0x79, 0xd4, 0xaa, 0xf0, 0x1d, 0x3c, 0xec, 0xa0, 0xb7, 0x53, 0xda,
	0x26, 0x2a, 0x05, 0x2e, 0x34, 0xc2, 0xa5, 0xad, 0x26, 0xc7, 0x30, 0xd4, 0x85, 0xb6, 0x55, 0x23,
	0xc2, 0x6f, 0xb0, 0x6f, 0x21, 0x1f, 0x4a, 0xac, 0x16, 0xff, 0x25, 0xdc, 0x37, 0x2b, 0x1f, 0xc6,
	0x0b, 0x5c, 0xa6, 0x75, 0x65, 0x66, 0xe5, 0xd1, 0x46, 0xbe, 0x78, 0x0e, 0x7b, 0x77, 0xc6, 0x4d,
	0x3c, 0x18, 0x7e, 0xbd, 0x79, 0x4f, 0xbf, 0x1f, 0x3d, 0x20, 0xfb, 0xe0, 0x5e, 0xdd, 0xcc, 0xde,
	0xcc, 0x3e, 0x4d, 0xbf, 0x1c, 0x39, 0x93, 0x6b, 0x18, 0x4b, 0xfb, 0xf0, 0xcf, 0x62, 0xb3, 0x2d,
	0x71, 0xb3, 0x2d, 0xb1, 0x5d, 0x89, 0x29, 0x57, 0x25, 0x5b, 0x4b, 0xff, 0xaf, 0x7b, 0xff, 0x7b,
	0x58, 0x1b, 0x6d, 0x48, 0x93, 0xcf, 0x30, 0x5c, 0xea, 0x7e, 0x9e, 0xf4, 0x90, 0xba, 0xcf, 0x0e,
	0xf0, 0x51, 0x17, 0xa8, 0x4d, 0xd4, 0x30, 0x26, 0x53, 0x18, 0x49, 0xb3, 0x57, 0x4f, 0x7b, 0xb4,
	0x2b, 0x54, 0x05, 0xeb, 0xe2, 0x4e, 0x7a, 0xf9, 0x74, 0x39, 0xb5, 0x98, 0xb7, 0x97, 0x3f, 0xce,
	0xf3, 0x52, 0x15, 0xf5, 0x3c, 0xce, 0xd8, 0x2a, 0xd9, 0xc8, 0x3a, 0x2f, 0x57, 0x4c, 0xb1, 0x24,
	0x17, 0x3c, 0x3b, 0xb3, 0xa5, 0x67, 0x79, 0xaa, 0xf0, 0x77, 0xba, 0x49, 0xac, 0x9e, 0x8f, 0xf4,
	0x9d, 0x97, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x27, 0x87, 0xcd, 0x9b, 0x6a, 0x03, 0x00, 0x00,
}
