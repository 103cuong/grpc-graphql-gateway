// Code generated by proroc-gen-graphql, DO NOT EDIT.
package starwars

import (
	"encoding/json"

	"github.com/graphql-go/graphql"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var _ = json.Marshal
var _ = json.Unmarshal

// enum Type in starwars/starwars.proto
func Gql__enum_Type() *graphql.Enum {
	return graphql.NewEnum(graphql.EnumConfig{
		Name: "Type",
		Values: graphql.EnumValueConfigMap{
			"HUMAN": &graphql.EnumValueConfig{
				Value: 0,
			},
			"DROID": &graphql.EnumValueConfig{
				Value: 1,
			},
		},
	})
}

// enum Episode in starwars/starwars.proto
func Gql__enum_Episode() *graphql.Enum {
	return graphql.NewEnum(graphql.EnumConfig{
		Name: "Episode",
		Values: graphql.EnumValueConfigMap{
			"_": &graphql.EnumValueConfig{
				Value: 0,
			},
			"NEWHOPE": &graphql.EnumValueConfig{
				Value: 1,
			},
			"EMPIRE": &graphql.EnumValueConfig{
				Value: 2,
			},
			"JEDI": &graphql.EnumValueConfig{
				Value: 3,
			},
		},
	})
}

// message Character in starwars/starwars.proto
func gql__interface_Character() *graphql.Interface {
	return graphql.NewInterface(graphql.InterfaceConfig{
		Name: "Character",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: graphql.Int,
			},
			"name": &graphql.Field{
				Type: graphql.String,
			},
			"appears_in": &graphql.Field{
				Type: graphql.NewList(Gql__enum_Episode()),
			},
			"home_planet": &graphql.Field{
				Type: graphql.String,
			},
			"primary_function": &graphql.Field{
				Type: graphql.String,
			},
			"type": &graphql.Field{
				Type: Gql__enum_Type(),
			},
		},
		ResolveType: func(p graphql.ResolveTypeParams) *graphql.Object {
			return Gql__type_Character()
		},
	})
}

// message GetHumanRequest in starwars/starwars.proto
func Gql__type_GetHumanRequest() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "GetHumanRequest",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type:        graphql.NewNonNull(graphql.Int),
				Description: "id of the human",
			},
		},
	})
}

// message GetHeroRequest in starwars/starwars.proto
func Gql__type_GetHeroRequest() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "GetHeroRequest",
		Fields: graphql.Fields{
			"episode": &graphql.Field{
				Type:        Gql__enum_Episode(),
				Description: "If omitted, returns the hero of the whope saga. If provided, returns the hero of that particular episode.",
			},
		},
	})
}

// message ListEmptyRequest in starwars/starwars.proto
func Gql__type_ListEmptyRequest() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name:   "ListEmptyRequest",
		Fields: graphql.Fields{},
	})
}

// message Character in starwars/starwars.proto
func Gql__type_Character() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "Character",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: graphql.Int,
			},
			"name": &graphql.Field{
				Type: graphql.String,
			},
			"friends": &graphql.Field{
				Type: graphql.NewList(gql__interface_Character()),
			},
			"appears_in": &graphql.Field{
				Type: graphql.NewList(Gql__enum_Episode()),
			},
			"home_planet": &graphql.Field{
				Type: graphql.String,
			},
			"primary_function": &graphql.Field{
				Type: graphql.String,
			},
			"type": &graphql.Field{
				Type: Gql__enum_Type(),
			},
		},
		Interfaces: []*graphql.Interface{
			gql__interface_Character(),
		},
	})
}

// message ListHumansResponse in starwars/starwars.proto
func Gql__type_ListHumansResponse() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "ListHumansResponse",
		Fields: graphql.Fields{
			"humans": &graphql.Field{
				Type: graphql.NewList(Gql__type_Character()),
			},
		},
	})
}

// message GetDroidRequest in starwars/starwars.proto
func Gql__type_GetDroidRequest() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "GetDroidRequest",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type:        graphql.NewNonNull(graphql.Int),
				Description: "id of the droid",
			},
		},
	})
}

// message ListDroidsResponse in starwars/starwars.proto
func Gql__type_ListDroidsResponse() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "ListDroidsResponse",
		Fields: graphql.Fields{
			"droids": &graphql.Field{
				Type: graphql.NewList(Gql__type_Character()),
			},
		},
	})
}

// graphql__resolver_StartwarsService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_StartwarsService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_StartwarsService) CreateConnection() (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.Dial(x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_StartwarsService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"hero": &graphql.Field{
			Type: graphql.Int,
			Args: graphql.FieldConfigArgument{
				"episode": &graphql.ArgumentConfig{
					Type:        Gql__enum_Episode(),
					Description: "If omitted, returns the hero of the whope saga. If provided, returns the hero of that particular episode.",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *GetHeroRequest
				if err := runtime.MarshalRequest(p.Args, &req); err != nil {
					return nil, err
				}
				client := NewStartwarsServiceClient(conn)
				resp, err := client.GetHero(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
		"human": &graphql.Field{
			Type: graphql.Int,
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type:        graphql.NewNonNull(graphql.Int),
					Description: "id of the human",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *GetHumanRequest
				if err := runtime.MarshalRequest(p.Args, &req); err != nil {
					return nil, err
				}
				client := NewStartwarsServiceClient(conn)
				resp, err := client.GetHuman(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
		"droid": &graphql.Field{
			Type: graphql.Int,
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type:        graphql.NewNonNull(graphql.Int),
					Description: "id of the droid",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *GetDroidRequest
				if err := runtime.MarshalRequest(p.Args, &req); err != nil {
					return nil, err
				}
				client := NewStartwarsServiceClient(conn)
				resp, err := client.GetDroid(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
		"humans": &graphql.Field{
			Type: graphql.NewList(Gql__type_Character()),
			Args: graphql.FieldConfigArgument{},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *ListEmptyRequest
				if err := runtime.MarshalRequest(p.Args, &req); err != nil {
					return nil, err
				}
				client := NewStartwarsServiceClient(conn)
				resp, err := client.ListHumans(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp.GetHumans(), nil
			},
		},
		"droids": &graphql.Field{
			Type: graphql.NewList(Gql__type_Character()),
			Args: graphql.FieldConfigArgument{},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *ListEmptyRequest
				if err := runtime.MarshalRequest(p.Args, &req); err != nil {
					return nil, err
				}
				client := NewStartwarsServiceClient(conn)
				resp, err := client.ListDroids(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp.GetDroids(), nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_StartwarsService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterStartwarsServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterStartwarsServiceGraphql(mux *runtime.ServeMux) {
	RegisterStartwarsServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service StartwarsService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterStartwarsServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) {
	mux.AddHandler(&graphql__resolver_StartwarsService{
		conn: conn,
		host: "localhost:50051",
		dialOptions: []grpc.DialOption{
			grpc.WithInsecure(),
		},
	})
}
