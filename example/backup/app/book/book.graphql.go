// Code generated by proroc-gen-graphql, DO NOT EDIT.
package book

import (
	"encoding/json"

	"github.com/graphql-go/graphql"
	author "github.com/ysugimoto/grpc-graphql-gateway/example/backup/app/author"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var _ = json.Marshal
var _ = json.Unmarshal

// enum BookType in book/book.proto
func Gql__enum_BookType() *graphql.Enum {
	return graphql.NewEnum(graphql.EnumConfig{
		Name: "BookType",
		Values: graphql.EnumValueConfigMap{
			"JAVASCRIPT": &graphql.EnumValueConfig{
				Value: 0,
			},
			"ECMASCRIPT": &graphql.EnumValueConfig{
				Value: 1,
			},
			"GIT": &graphql.EnumValueConfig{
				Value: 2,
			},
			"ASP_DOT_NET": &graphql.EnumValueConfig{
				Value: 3,
			},
		},
	})
}

// message Book in book/book.proto
func gql__interface_Book() *graphql.Interface {
	return graphql.NewInterface(graphql.InterfaceConfig{
		Name: "Book",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: graphql.Int,
			},
			"title": &graphql.Field{
				Type: graphql.String,
			},
			"type": &graphql.Field{
				Type: Gql__enum_BookType(),
			},
			"author": &graphql.Field{
				Type: author.Gql__type_Author(),
			},
			"description": &graphql.Field{
				Type: Gql__type_Book_Description(),
			},
		},
		ResolveType: func(p graphql.ResolveTypeParams) *graphql.Object {
			return Gql__type_Book()
		},
	})
}

// message CreateBookRequest in book/book.proto
func Gql__type_CreateBookRequest() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "CreateBookRequest",
		Fields: graphql.Fields{
			"title": &graphql.Field{
				Type: graphql.String,
			},
			"type": &graphql.Field{
				Type: Gql__enum_BookType(),
			},
			"author": &graphql.Field{
				Type: author.Gql__type_Author(),
			},
			"author_type": &graphql.Field{
				Type: author.Gql__enum_AuthorType(),
			},
			"nested": &graphql.Field{
				Type: Gql__type_CreateBookRequest_NestedOne(),
			},
			"created_at": &graphql.Field{
				Type: Gql__type_Timestamp(),
			},
		},
	})
}

// message ListBooksRequest in book/book.proto
func Gql__type_ListBooksRequest() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name:   "ListBooksRequest",
		Fields: graphql.Fields{},
	})
}

// message GetBookRequest in book/book.proto
func Gql__type_GetBookRequest() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "GetBookRequest",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type:        graphql.Int,
				Description: "this is example comment for id field",
			},
		},
	})
}

// message ListBooksResponse in book/book.proto
func Gql__type_ListBooksResponse() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "ListBooksResponse",
		Fields: graphql.Fields{
			"books": &graphql.Field{
				Type: graphql.NewList(Gql__type_Book()),
			},
		},
	})
}

// message CreateBookRequest.NestedOne in book/book.proto
func Gql__type_CreateBookRequest_NestedOne() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "CreateBookRequest_NestedOne",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: graphql.Int,
			},
		},
	})
}

// message Book.Description in book/book.proto
func Gql__type_Book_Description() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "Book_Description",
		Fields: graphql.Fields{
			"value": &graphql.Field{
				Type: graphql.String,
			},
		},
	})
}

// message Timestamp in google/protobuf/timestamp.proto
func Gql__type_Timestamp() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "Timestamp",
		Fields: graphql.Fields{
			"seconds": &graphql.Field{
				Type: graphql.Int,
			},
			"nanos": &graphql.Field{
				Type: graphql.Int,
			},
		},
	})
}

// message Book in book/book.proto
func Gql__type_Book() *graphql.Object {
	return graphql.NewObject(graphql.ObjectConfig{
		Name: "Book",
		Fields: graphql.Fields{
			"id": &graphql.Field{
				Type: graphql.Int,
			},
			"title": &graphql.Field{
				Type: graphql.String,
			},
			"type": &graphql.Field{
				Type: Gql__enum_BookType(),
			},
			"author": &graphql.Field{
				Type: author.Gql__type_Author(),
			},
			"description": &graphql.Field{
				Type: Gql__type_Book_Description(),
			},
			"related": &graphql.Field{
				Type: gql__interface_Book(),
			},
		},
		Interfaces: []*graphql.Interface{
			gql__interface_Book(),
		},
	})
}

// message CreateBookRequest in book/book.proto
func Gql__input_CreateBookRequest() *graphql.InputObject {
	return graphql.NewInputObject(graphql.InputObjectConfig{
		Name: "CreateBookRequest",
		Fields: graphql.InputObjectConfigFieldMap{
			"title": &graphql.InputObjectFieldConfig{
				Type: graphql.String,
			},
			"type": &graphql.InputObjectFieldConfig{
				Type: Gql__enum_BookType(),
			},
			"author": &graphql.InputObjectFieldConfig{
				Type: Gql__input_Author(),
			},
			"author_type": &graphql.InputObjectFieldConfig{
				Type: author.Gql__enum_AuthorType(),
			},
			"nested": &graphql.InputObjectFieldConfig{
				Type: Gql__input_CreateBookRequest_NestedOne(),
			},
			"created_at": &graphql.InputObjectFieldConfig{
				Type: Gql__input_Timestamp(),
			},
		},
	})
}

// message CreateBookRequest.NestedOne in book/book.proto
func Gql__input_CreateBookRequest_NestedOne() *graphql.InputObject {
	return graphql.NewInputObject(graphql.InputObjectConfig{
		Name: "CreateBookRequest_NestedOne",
		Fields: graphql.InputObjectConfigFieldMap{
			"id": &graphql.InputObjectFieldConfig{
				Type: graphql.Int,
			},
		},
	})
}

// message Timestamp in google/protobuf/timestamp.proto
func Gql__input_Timestamp() *graphql.InputObject {
	return graphql.NewInputObject(graphql.InputObjectConfig{
		Name: "Timestamp",
		Fields: graphql.InputObjectConfigFieldMap{
			"seconds": &graphql.InputObjectFieldConfig{
				Type: graphql.Int,
			},
			"nanos": &graphql.InputObjectFieldConfig{
				Type: graphql.Int,
			},
		},
	})
}

// message Author in author/author.proto
func Gql__input_Author() *graphql.InputObject {
	return graphql.NewInputObject(graphql.InputObjectConfig{
		Name: "Author",
		Fields: graphql.InputObjectConfigFieldMap{
			"name": &graphql.InputObjectFieldConfig{
				Type: graphql.String,
			},
		},
	})
}

// graphql__resolver_BookService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_BookService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_BookService) CreateConnection() (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.Dial(x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_BookService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"books": &graphql.Field{
			Type: graphql.NewList(Gql__type_Book()),
			Args: graphql.FieldConfigArgument{},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *ListBooksRequest
				if err := runtime.MarshalRequest(p.Args, &req); err != nil {
					return nil, err
				}
				client := NewBookServiceClient(conn)
				resp, err := client.ListBooks(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp.GetBooks(), nil
			},
		},
		"book": &graphql.Field{
			Type: graphql.Int,
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type:         graphql.Int,
					Description:  "this is example comment for id field",
					DefaultValue: 10,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *GetBookRequest
				if err := runtime.MarshalRequest(p.Args, &req); err != nil {
					return nil, err
				}
				client := NewBookServiceClient(conn)
				resp, err := client.GetBook(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_BookService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"createbook": &graphql.Field{
			Type: Gql__type_Book(),
			Args: graphql.FieldConfigArgument{
				"title": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"type": &graphql.ArgumentConfig{
					Type: Gql__enum_BookType(),
				},
				"author": &graphql.ArgumentConfig{
					Type: Gql__input_Author(),
				},
				"author_type": &graphql.ArgumentConfig{
					Type: author.Gql__enum_AuthorType(),
				},
				"nested": &graphql.ArgumentConfig{
					Type: Gql__input_CreateBookRequest_NestedOne(),
				},
				"created_at": &graphql.ArgumentConfig{
					Type: Gql__input_Timestamp(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *CreateBookRequest
				if err := runtime.MarshalRequest(p.Args, &req); err != nil {
					return nil, err
				}
				client := NewBookServiceClient(conn)
				resp, err := client.CreateBook(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterBookServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterBookServiceGraphql(mux *runtime.ServeMux) {
	RegisterBookServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service BookService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterBookServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) {
	mux.AddHandler(&graphql__resolver_BookService{
		conn: conn,
		host: "localhost:8080",
		dialOptions: []grpc.DialOption{
			grpc.WithInsecure(),
		},
	})
}
