// Code generated by proroc-gen-graphql, DO NOT EDIT.
package author

import (
	"encoding/json"

	"github.com/graphql-go/graphql"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var _ = json.Marshal
var _ = json.Unmarshal

var Gql__type_Author = graphql.NewObject(graphql.ObjectConfig{
	Name: "Author",
	Fields: graphql.Fields{
		"name": &graphql.Field{
			Type: graphql.NewNonNull(graphql.String),
		},
	},
}) // message Author in author/author.proto
// depended input

var Gql__enum_AuthorType = graphql.NewEnum(graphql.EnumConfig{
	Name: "AuthorType",
	Values: graphql.EnumValueConfigMap{
		"NORMAL": &graphql.EnumValueConfig{
			Value: 0,
		},
		"SPECIAL": &graphql.EnumValueConfig{
			Value: 1,
		},
	},
}) // enum AuthorType in author/author.proto
// depended enum

var Gql__input_Author = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "Author",
	Fields: graphql.InputObjectConfigFieldMap{
		"name": &graphql.InputObjectFieldConfig{
			Type: graphql.NewNonNull(graphql.String),
		},
	},
}) // message Author in author/author.proto

// graphql__resolver_AuthorService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_AuthorService struct {
	// grpc client connection.
	// this connection may be provided by user, then isAutoConnection should be false
	conn *grpc.ClientConn

	// isAutoConnection indicates that the grpc connection is opened by this handler.
	// If true, this handler opens connection automatically, and it should be closed on Close() method.
	isAutoConnection bool
}

// Close() closes grpc connection if it is opened automatically.
func (x *graphql__resolver_AuthorService) Close() error {
	// nothing to do because the connection is supplied by user, and it should be closed user themselves.
	if !x.isAutoConnection {
		return nil
	}
	return x.conn.Close()
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_AuthorService) GetQueries() graphql.Fields {
	return graphql.Fields{
		"authors": &graphql.Field{
			Type: graphql.NewNonNull(graphql.NewList(Gql__type_Author)),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *ListAuthorsRequest
				if err := runtime.MarshalRequest(p.Args, req); err != nil {
					return nil, err
				}
				client := NewAuthorServiceClient(x.conn)
				resp, err := client.ListAuthors(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp.GetAuthors(), nil
			},
		},
		"author": &graphql.Field{
			Type: Gql__type_Author,
			Args: graphql.FieldConfigArgument{
				"name": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *GetAuthorRequest
				if err := runtime.MarshalRequest(p.Args, req); err != nil {
					return nil, err
				}
				client := NewAuthorServiceClient(x.conn)
				resp, err := client.GetAuthor(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_AuthorService) GetMutations() graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterAuthorServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterAuthorServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterAuthorServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, the resolver opens connection automatically and then you need to define host with ServiceOption like:
//
// service SomeServiceName {
//    option (graphql.service) = {
//        host: "localhost:50051";
//        insecure: true or false;
//    };
//
//    ...with RPC definitions
// }
func RegisterAuthorServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) (err error) {
	var isAutoConnection bool
	if conn == nil {
		isAutoConnection = true
		conn, err = grpc.Dial("localhost:8080", grpc.WithInsecure())
		if err != nil {
			return
		}
	}
	mux.AddHandler(&graphql__resolver_AuthorService{conn, isAutoConnection})
	return
}
