// Code generated by proroc-gen-graphql, DO NOT EDIT.
package book

import (
	"encoding/json"

	"github.com/graphql-go/graphql"
	author "github.com/ysugimoto/grpc-graphql-gateway/examples/basic/app/author"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var _ = json.Marshal
var _ = json.Unmarshal

var gql__type_ListBooksRequest = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ListBooksRequest",
	Fields: graphql.Fields{},
}) // message ListBooksRequest in book/book.proto

var gql__type_Book = graphql.NewObject(graphql.ObjectConfig{
	Name: "Book",
	Fields: graphql.Fields{
		"id": &graphql.Field{
			Type: graphql.NewNonNull(graphql.Int),
		},
		"title": &graphql.Field{
			Type: graphql.NewNonNull(graphql.String),
		},
		"type": &graphql.Field{
			Type: graphql.NewNonNull(gql__enum_BookType),
		},
		"author": &graphql.Field{
			Type: graphql.NewNonNull(gql__type_Author),
		},
	},
}) // message Book in book/book.proto

var gql__type_Author = graphql.NewObject(graphql.ObjectConfig{
	Name: "Author",
	Fields: graphql.Fields{
		"name": &graphql.Field{
			Type: graphql.NewNonNull(graphql.String),
		},
	},
}) // message Author in author/author.proto

var gql__type_ListBooksResponse = graphql.NewObject(graphql.ObjectConfig{
	Name: "ListBooksResponse",
	Fields: graphql.Fields{
		"books": &graphql.Field{
			Type: graphql.NewNonNull(graphql.NewList(gql__type_Book)),
		},
	},
}) // message ListBooksResponse in book/book.proto

var gql__type_GetBookRequest = graphql.NewObject(graphql.ObjectConfig{
	Name: "GetBookRequest",
	Fields: graphql.Fields{
		"id": &graphql.Field{
			Type:        graphql.NewNonNull(graphql.Int),
			Description: "this is example comment for id field",
		},
	},
}) // message GetBookRequest in book/book.proto

var gql__enum_BookType = graphql.NewEnum(graphql.EnumConfig{
	Name: "BookType",
	Values: graphql.EnumValueConfigMap{
		"JAVASCRIPT": &graphql.EnumValueConfig{
			Value: 0,
		},
		"ECMASCRIPT": &graphql.EnumValueConfig{
			Value: 1,
		},
		"GIT": &graphql.EnumValueConfig{
			Value: 2,
		},
		"ASP_DOT_NET": &graphql.EnumValueConfig{
			Value: 3,
		},
	},
}) // enum BookType in book/book.proto

var gql__input_CreateBookRequest = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "CreateBookRequest",
	Fields: graphql.InputObjectConfigFieldMap{
		"title": &graphql.InputObjectFieldConfig{
			Type: graphql.NewNonNull(graphql.String),
		},
		"type": &graphql.InputObjectFieldConfig{
			Type: graphql.NewNonNull(gql__enum_BookType),
		},
		"author": &graphql.InputObjectFieldConfig{
			Type: graphql.NewNonNull(gql__type_Author),
		},
	},
}) // message CreateBookRequest in book/book.proto

// gql__resolver_BookService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.Resolver interface.
type gql__resolver_BookService struct {
	conn *grpc.ClientConn
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *gql__resolver_BookService) GetQueries() graphql.Fields {
	return graphql.Fields{
		"books": &graphql.Field{
			Type: graphql.NewNonNull(graphql.NewList(gql__type_Book)),
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return nil, nil
			},
		},
		"book": &graphql.Field{
			Type: gql__type_Book,
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{
					Type:        graphql.NewNonNull(graphql.Int),
					Description: "this is example comment for id field",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return nil, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *gql__resolver_BookService) GetMutations() graphql.Fields {
	return graphql.Fields{
		"createbook": &graphql.Field{
			Type: gql__type_Book,
			Args: graphql.FieldConfigArgument{
				"input": &graphql.ArgumentConfig{
					Type: gql__input_CreateBookRequest,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req *CreateBookRequest
				if err := runtime.MarshalRequest(p.Args, req); err != nil {
					return nil, err
				}
				client := NewBookServiceClient(x.conn)
				resp, err := client.CreateBook(p.Context, req)
				if err != nil {
					return nil, err
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you worried about open/close performance for each handling graphql request,
// then you can call RegisterBookHandler with *grpc.ClientConn manually.
func RegisterBookGraphql(mux *runtime.ServeMux) error {
	return RegisterBookGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when appication will terminate.
// Otherwise, the resolver opens connection automatically, but then you need to define host with ServiceOption like:
//
// service XXXService {
//    option (graphql.service) = {
//        host: "localhost:50051"
//    };
//
//    ...with RPC definitions
// }
func RegisterBookGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) (err error) {
	if conn == nil {
		conn, err = grpc.Dial("localhost:8080", grpc.WithInsecure())
		if err != nil {
			return
		}
	}
	mux.AddHandler(&gql__resolver_BookService{conn})
	return
}
